import asyncio
import logging
import sys
import os
import aiogram.filters
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from YandexMusicAPI import YandexMusicAPI
from States import Form
from Postgres import Postgres

load_dotenv()
my_token = os.getenv("TOKEN")
ym_client = YandexMusicAPI(os.getenv("YM_TOKEN"))
dp = Dispatcher()
db = Postgres()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—Ä–µ–∫–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞
@dp.message(aiogram.filters.Command("get_chart_by_artist"))
async def get_chart_by_artist(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
    await state.set_state(Form.artist_name)


@dp.message(Form.artist_name)
async def process_artist_name(message: types.Message, state: FSMContext):
    await state.update_data(artist_name=message.text)
    res = await ym_client.get_chart_by_artist(message.text)
    if res:
        await message.answer(res)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª—é–±–∏–º–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
@dp.message(aiogram.filters.Command("set_favorite_artist"))
async def set_favorite_artist(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
    await state.set_state(Form.favorite_artist)


@dp.message(Form.favorite_artist)
async def process_favorite_artist(message: types.Message, state: FSMContext):
    await state.update_data(favorite_artist=message.text)
    print(await db.insert(message.from_user.username, message.text))
    await message.answer("–£—Å–ø–µ—à–Ω–æ! –õ—é–±–∏–º—ã–π –∞—Ä—Ç–∏—Å—Ç –≤—ã–±—Ä–∞–Ω.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –ø–µ—Å–Ω–∏ –ª—é–±–∏–º–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
@dp.message(aiogram.filters.Command("get_random_song"))
async def get_random_song(message: types.Message):
    val = await db.get_favorite_artist_by_user(message.from_user.username)
    if val:
        res = await ym_client.get_random_song(val)
        if res:
            await message.answer(res)
        else:
            await message.answer(f'''–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞.
–í–∞—à –ª—é–±–∏–º—ã–π –∞—Ä—Ç–∏—Å—Ç —Å–µ–π—á–∞—Å: {val}''')
    else:
        await message.answer('''–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /set_favorite_artist''')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@dp.message(aiogram.filters.Command("start"))
async def start_func(message: types.Message):
    await message.answer(f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!
     
–Ø Snoopy - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –º—É–∑—ã–∫–∏! üê∂ –ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–µ—Å–Ω–∏ –Ω–∞ —Ç–≤–æ–π –≤–∫—É—Å.
     
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
/get_chart  - –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ä—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
/get_chart_by_artist - –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø 10 –ø–µ—Å–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
/set_favorite_artist - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
/get_random_song - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é –ø–æ –ª—é–±–∏–º–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é''')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–µ—Å–µ–Ω
@dp.message(aiogram.filters.Command("get_chart"))
async def get_chart(message: types.Message):
    await message.answer(await ym_client.get_chart())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer("–ì–∞–≤-–≥–∞–≤...")


async def main():
    await db.connect()
    bot = Bot(my_token) # —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
